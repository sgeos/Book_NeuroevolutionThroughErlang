cat erl.txt
erl
Copy the following relevant commands into the erlang prompt.

polis:sync(). % OR make:all( [ load ] ).
polis:reset(). % OR polis:create().

% make the following modifications to prepare for the pole balancing benchmarks

% MODIFY genotype.erl
create_test() ->
  Specie_Id = test,
  Agent_Id = test,
  SpecCon = #constraint{ morphology = pole_balancing }, % <= MODIFY
  F = fun() ->
    case genotype:read( { agent, test } ) of
      undefined ->
        construct_Agent( Specie_Id, Agent_Id, SpecCon ),
        print( Agent_Id );
      _ ->
        delete_Agent( Agent_Id ),
        construct_Agent( Specie_Id, Agent_Id, SpecCon ),
        print( Agent_Id )
    end
  end,
  mnesia:transaction( F ).

% MODIFY population_monitor.erl
-define(
  INIT_CONSTRAINTS,
  [
    #constraint{
      morphology = Morphology,
      connection_architecture = CA,
      population_evo_alg_f = generational
      %population_evo_alg_f = steady_state
    }
    || Morphology <- [ pole_balancing ], CA <- [ recurrent ] % <= MODIFY
  ]
).

% MODIFY benchmarker.erl
-define(
  INIT_CONSTRAINTS,
  [
    #constraint{
      morphology = Morphology,
      connection_architecture = CA,
      population_evo_alg_f = generational
    }
    || Morphology <- [ pole_balancing ], CA <- [ recurrent ] ] % <= MODIFY
).
  PMP = #pmp{
    op_mode = gt,
    population_id = test,
    survival_percentage = 0.5,
    specie_size_limit = 10,
    init_specie_size = 10,
    polis_id = mathema,
    generation_limit = inf,
    evaluations_limit = 10000, % <= MODIFY
    fitness_goal = 90000 % <= MODIFY
  },
  E=#experiment{
    id = Id,
    backup_flag = true,
    pm_parameters = PMP,
    init_constraints = ?INIT_CONSTRAINTS,
    progress_flag = in_progress,
    run_index = 1,
    tot_runs = 50, % <= MODIFY
    started = { date(), time() },
    interruptions = []
  },

% benchmark: single pole, partial information, standard fitness function (no damping)
% MODIFY benchmarker.erl, genotype.erl and population_monitor.erl to use:
%   pole_balancing_single
% then rebuild all modules, reload all modules, regenerate the database and run benchmarks
polis:sync(). % OR make:all( [ load ] ).
polis:reset(). % OR polis:create().
benchmarker:start( spb_without_damping ).

% benchmark: double pole, partial information, standard fitness function (no damping)
% MODIFY benchmarker.erl, genotype.erl and population_monitor.erl to use:
%   pole_balancing_double
% then rebuild all modules, reload all modules, regenerate the database and run benchmarks
polis:sync(). % OR make:all( [ load ] ).
polis:reset(). % OR polis:create().
benchmarker:start( dpb_without_damping ).

% benchmark: double pole, partial information, with damping fitness function
% MODIFY benchmarker.erl, genotype.erl and population_monitor.erl to use:
%   pole_balancing_double_damping
% MODIFY benchmarker.erl to use a fitness goal of:
%   inf
% then rebuild all modules, reload all modules, regenerate the database and run benchmarks
polis:sync(). % OR make:all( [ load ] ).
polis:reset(). % OR polis:create().
benchmarker:start( dpb_with_damping ).

% -------------
% make the following modifications to prepare for the discrete tmaze benchmarks

% MODIFY genotype.erl
create_test() ->
  Specie_Id = test,
  Agent_Id = test,
  SpecCon = #constraint{ morphology = discrete_tmaze }, % <= MODIFY
  F = fun() ->
    case genotype:read( { agent, test } ) of
      undefined ->
        construct_Agent( Specie_Id, Agent_Id, SpecCon ),
        print( Agent_Id );
      _ ->
        delete_Agent( Agent_Id ),
        construct_Agent( Specie_Id, Agent_Id, SpecCon ),
        print( Agent_Id )
    end
  end,
  mnesia:transaction( F ).

% MODIFY population_monitor.erl
-define(
  INIT_CONSTRAINTS,
  [
    #constraint{
      morphology = Morphology,
      connection_architecture = CA,
      population_evo_alg_f = generational
      %population_evo_alg_f = steady_state
    }
    || Morphology <- [ discrete_tmaze ], CA <- [ recurrent ] % <= MODIFY
  ]
).

% MODIFY benchmarker.erl
-define(
  INIT_CONSTRAINTS,
  [
    #constraint{
      morphology = Morphology,
      connection_architecture = CA,
      population_evo_alg_f = generational
    }
    || Morphology <- [ discrete_tmaze ], CA <- [ recurrent ] ] % <= MODIFY
).
  PMP = #pmp{
    op_mode = gt,
    population_id = test,
    survival_percentage = 0.5,
    specie_size_limit = 10,
    init_specie_size = 10,
    polis_id = mathema,
    generation_limit = inf,
    evaluations_limit = 5000, % <= MODIFY
    fitness_goal = inf % <= MODIFY
  },
  E=#experiment{
    id = Id,
    backup_flag = true,
    pm_parameters = PMP,
    init_constraints = ?INIT_CONSTRAINTS,
    progress_flag = in_progress,
    run_index = 1,
    tot_runs = 20, % <= MODIFY
    started = { date(), time() },
    interruptions = []
  },

% benchmark: discrete tmaze
% rebuild all modules, reload all modules, regenerate the database and run benchmarks
polis:sync(). % OR make:all( [ load ] ).
polis:reset(). % OR polis:create().
benchmarker:start( discrete_tmaze ).

